Phase End Project :-


Project objective:

As a Full Stack Developer, complete the features of the application by planning the development and pushing the source code to the GitHub repository.


Background of the problem statement:

Sporty Shoes is a company that manufactures and sells sports shoes. They have a walk-in store, and now, they wish to launch their e-commerce portal sportyshoes.com.



You’re asked to develop a prototype of the application. It will be then presented to the relevant stakeholders for budget approval. Your manager has set up a meeting where you’re asked to do the following:

● Presenting the specification document which has the product’s capabilities, appearance, and user interactions
● Setting up Git and GitHub account to store and track your enhancements of the prototype
● Explaining the Java concepts used in the project
● Discussing the generic features of the product:
● There will be an admin to manage the website. An administrator login will be required to access the admin page.


Front End

Back End
Layers


Data Access Layer
--------------------
	@Entity
	Product
		id, name, price, category

	Product N:N Order

	Order
		id, name, customer-id, productid

	User
		id, name, isRegisterd, role
		-> Admin, User/Customer

	Mapping
		-> Product -> Order

	@Repository (JPA)
	ProductRepository extends JpaRepository<Product, Long>
		By default => findById, findAll, save, deleteById, delete
		List<Product> findByName(String name);
		List<Product> findByPrice(long price);
		List<Product> findByCategory(String category);


Service Layer
---------------
@Service
ProductService(I)
	C + R  + U + D
	C -> Product createProduct(Product product);

	R -> List<Product> getProducts();
	R -> List<Product> getProducts(String category);
	R -> List<Product> getProducts(String name);
	R -> List<Product> getProducts(Long price);

	R -> Product getProduct(Long id);
	R -> Product getProduct(String category);
	U -> void updateProduct(Long id, Product product);
	D -> void deleteProduct(Long id);


Controller Layer
------------------
@RestController
@RequestMapping("/products")
ProductController

	//CREATE
	@PostMapping
	Product saveProduct(@RequestBody Product product)
	URL :- http://localhost:8083/products + { "name" : "Raghav", "price":"MJ", "category":"raghav@gmail.com" }

	//READ
	@GetMapping
	List<Product> getProducts();
	URL:- http://localhost:8083/products/

	@GetMapping("/{id}")
	Product getProductById(@PathVariable("id") Long id)
	URL:- http://localhost:8083/products/2

	@GetMapping("/search")
	Product getProductById(@RequesrParam("category") String category)
	URL:- http://localhost:8083/search?category=raghav@gmail.com

	@PutMapping("/{id}")
	void updateProduct(@PathVariable("id") Long id, @RequestBody Product product)
	URL :- http://localhost:8083/products/1 + { "name" : "Raghavendra", "price":"M J", "category":"raghav@gmail.com" }

	@DeleteMapping("/{id}")
	void deleteProduct(@PathVariable("id"))
	URL :- http://localhost:8083/products/1


UserController -> /users
	-> /signup -> POST
	-> /getAllUsers -> GET
	-> /getUser/{name} -> GET

OrderController -> /orders
	-> /user/{userid}
	->/date/{date}
	->/category/{category}
	->/search?date=12-01-2021&category=kids


The admin should be able to change his password if he wants, he should be able to:
	-> Change Password Form
		-> JSP
				-> form -> username, old password, new password
	-> Admin Login Form
		-> JSP
				-> session based login form

● Manage the products in the store including categorizing them
		Navs -> bootstrap / dropdown
	-> Kids
			-> Shoes
					-> 3-4 styles
					-> 3-7 sizes
	-> Mens
	-> Womens

● Browse the list of users who have signed up and be able to search users -> ADMIN Operation
	-> save all the signed-up in users in database.
		-> Customer Data and persist it in database
	-> Simple form to search the users.
		-> Simple search form for searching the users.

● See purchase reports filtered by date and category
	Orders table
		-> Order table ->
			-> Filtering capabilities



The admin should be able to change his password if he wants, he should be able to:

User
	-> user1 -> Admin
	-> user2 -> Admin
	-> user3 -> Admin
	
	
	
	
